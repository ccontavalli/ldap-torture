- Torture::Server -> abstracts an LDAP server behind a single class
	* Torture::Server::LDAP -> connects to a real LDAP server
	* Torture::Server::Perl -> emulates a simple LDAP server by
		using perl hashes, arrays, and so on...

- Torture::Schema -> loads a schema from...
	* Torture::Schema::LDAP -> an ldap server, using an ldap connection
	- Torture::Schema::dump -> a dump taken from an LDAP object

- Torture::Random::Primitive -> primitive for generating random numbers...
	* Torture::Random::Primitive::rand -> generates a random number using rand(3) and srand(3)
	* Torture::Random::Primitive::accumulator -> a fake prng, uses another prng
	    class, like Torture::Random::Primitive::rand, but remembers all random values
	    returned and generated by this prng. When it is asked for a seed, prints out 
	    the random number generation log.
	* Torture::Random::Primitive::logger -> a fake prng, uses another prng
	    class, like Torture::Random::Primitive::rand, and outputs on a given
	    file all the returned random values...
	- Torture::Random::Primitive::forecast -> produce random numbers based on
	    conditions and instructions provided by a configuration file

- Torture::Random::Attributes -> contains an hash with associates an OID with a perl function
	the perl function is responsible to generate plausible values for the given OID.
	In practice, the OID represent data types, like strings, numbers, phone numbers,
	and so on... each function in the Torture::Random::Attributes is able to generate
	random data for the given types.
	This is a good place where to start editing to add support for more random types.

- Torture::Random::Generator -> by using a prng, a schema description, an attribute
 	generator, and a reference server, it is able to generate classes satisfying 
	various prerequisites... like: classes without parent, classes with an existing
	dn, and so on..

- Torture::Operations -> Loads Torture::Operations::* subclasses. It provides a list of
  	operations the Torture module is able to perform on a database. Those operations
	can be freely performed on the database.

- Torture::Killer -> by using a Torture::Operations module and a prng, it chooses a random
	operation to perform, and then performs it on the database... in case an error
	is encountered, the operation is dumped and the seed printed...

