- uhm .. allora, ho bisogno:
	- di oggetti random validi di ldap
	- operazioni random da effettuare
	- oggetti validi gia` parte del database ldap
  ho bisogno, poi:
  	- di un concetto di contesto, per fare dei
	  giochettini affinita`
	- di poter tunare molto bene il rng da file
	  di configurazione

- Random::Generator::player -> legge l'output di logger,
  accumulator o replayer e rifornisce i numeri random 
  richiesti

- Random::Generator::replayer -> come accumulator, ma che
  invece di tenere in memoria tutti i valori, utilizza il
  seed per riprendere la generazione

- far prendere il seed da riga di comando

- allora ... il test deve essere ripetibile, sempre,
  per cui. Tre metodi per riprodurlo (e per memorizzarlo):
  	- tramite semplice seed - il seed e` _sempre_
	  in qualche modo outputtato 
	- tramite registrazione di tutti i numeri 
	  random generati
	- tramite registrazione di tutte le operazioni
	  effettuate
- la generazione dei numeri random deve essere estremamente
  tunabile, per cui

- le funzioni di random non dovrebbero piu` prendere
  range di valori o indicazioni su cosa restituir, ma 
  ``etichette'' che indichino che cosa deve essere
  preso. Un hash in Random::self dovrebbe poi indicare
  il range di valori e ``come calcolare il random''. 
  Il passo successivo sarebbe poi fare precaricare
  l'hash da file di configurazione, o consentire a
  operations.pl di passare l'hash (che caricherebbe
  poi lui da chissadove).
- figure dei dn
  - padre(x) relativo
  - figli(x) relativo
  - coetanei(x) relativo
  - radice
  - foglie
  - rami
